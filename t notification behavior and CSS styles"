[1mdiff --git a/public/tailwind.css b/public/tailwind.css[m
[1mindex 9563a8b..eff7cae 100644[m
[1m--- a/public/tailwind.css[m
[1m+++ b/public/tailwind.css[m
[36m@@ -230,6 +230,9 @@[m
   .top-0 {[m
     top: calc(var(--spacing) * 0);[m
   }[m
[32m+[m[32m  .top-4 {[m
[32m+[m[32m    top: calc(var(--spacing) * 4);[m
[32m+[m[32m  }[m
   .top-full {[m
     top: 100%;[m
   }[m
[36m@@ -735,9 +738,15 @@[m
   .grid {[m
     display: grid;[m
   }[m
[32m+[m[32m  .hidden {[m
[32m+[m[32m    display: none;[m
[32m+[m[32m  }[m
   .inline-flex {[m
     display: inline-flex;[m
   }[m
[32m+[m[32m  .table {[m
[32m+[m[32m    display: table;[m
[32m+[m[32m  }[m
   .h-4 {[m
     height: calc(var(--spacing) * 4);[m
   }[m
[36m@@ -780,6 +789,9 @@[m
   .flex-1 {[m
     flex: 1;[m
   }[m
[32m+[m[32m  .border-collapse {[m
[32m+[m[32m    border-collapse: collapse;[m
[32m+[m[32m  }[m
   .origin-top {[m
     transform-origin: top;[m
   }[m
[36m@@ -794,6 +806,10 @@[m
     --tw-translate-y: calc(var(--spacing) * 0);[m
     translate: var(--tw-translate-x) var(--tw-translate-y);[m
   }[m
[32m+[m[32m  .translate-y-2 {[m
[32m+[m[32m    --tw-translate-y: calc(var(--spacing) * 2);[m
[32m+[m[32m    translate: var(--tw-translate-x) var(--tw-translate-y);[m
[32m+[m[32m  }[m
   .translate-y-full {[m
     --tw-translate-y: 100%;[m
     translate: var(--tw-translate-x) var(--tw-translate-y);[m
[36m@@ -807,6 +823,9 @@[m
   .cursor-pointer {[m
     cursor: pointer;[m
   }[m
[32m+[m[32m  .resize {[m
[32m+[m[32m    resize: both;[m
[32m+[m[32m  }[m
   .list-decimal {[m
     list-style-type: decimal;[m
   }[m
[36m@@ -930,6 +949,9 @@[m
   .bg-\[rgba\(0\,0\,0\,0\.7\)\] {[m
     background-color: rgba(0,0,0,0.7);[m
   }[m
[32m+[m[32m  .bg-black {[m
[32m+[m[32m    background-color: var(--color-black);[m
[32m+[m[32m  }[m
   .bg-black\/50 {[m
     background-color: color-mix(in srgb, #000 50%, transparent);[m
     @supports (color: color-mix(in lab, red, red)) {[m
[36m@@ -951,6 +973,9 @@[m
   .bg-green-600 {[m
     background-color: var(--color-green-600);[m
   }[m
[32m+[m[32m  .bg-red-500 {[m
[32m+[m[32m    background-color: var(--color-red-500);[m
[32m+[m[32m  }[m
   .bg-transparent {[m
     background-color: transparent;[m
   }[m
[36m@@ -1061,6 +1086,9 @@[m
     --tw-font-weight: var(--font-weight-medium);[m
     font-weight: var(--font-weight-medium);[m
   }[m
[32m+[m[32m  .whitespace-pre-line {[m
[32m+[m[32m    white-space: pre-line;[m
[32m+[m[32m  }[m
   .whitespace-pre-wrap {[m
     white-space: pre-wrap;[m
   }[m
[36m@@ -1088,6 +1116,9 @@[m
   .text-white {[m
     color: var(--color-white);[m
   }[m
[32m+[m[32m  .underline {[m
[32m+[m[32m    text-decoration-line: underline;[m
[32m+[m[32m  }[m
   .opacity-0 {[m
     opacity: 0%;[m
   }[m
[36m@@ -1120,11 +1151,19 @@[m
   .ring-black {[m
     --tw-ring-color: var(--color-black);[m
   }[m
[32m+[m[32m  .outline {[m
[32m+[m[32m    outline-style: var(--tw-outline-style);[m
[32m+[m[32m    outline-width: 1px;[m
[32m+[m[32m  }[m
   .backdrop-blur-sm {[m
     --tw-backdrop-blur: blur(var(--blur-sm));[m
     -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);[m
     backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);[m
   }[m
[32m+[m[32m  .backdrop-filter {[m
[32m+[m[32m    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);[m
[32m+[m[32m    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);[m
[32m+[m[32m  }[m
   .transition-all {[m
     transition-property: all;[m
     transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));[m
[36m@@ -1952,6 +1991,11 @@[m [mli {[m
   inherits: false;[m
   initial-value: 0 0 #0000;[m
 }[m
[32m+[m[32m@property --tw-outline-style {[m
[32m+[m[32m  syntax: "*";[m
[32m+[m[32m  inherits: false;[m
[32m+[m[32m  initial-value: solid;[m
[32m+[m[32m}[m
 @property --tw-backdrop-blur {[m
   syntax: "*";[m
   inherits: false;[m
[36m@@ -2041,6 +2085,7 @@[m [mli {[m
       --tw-ring-offset-width: 0px;[m
       --tw-ring-offset-color: #fff;[m
       --tw-ring-offset-shadow: 0 0 #0000;[m
[32m+[m[32m      --tw-outline-style: solid;[m
       --tw-backdrop-blur: initial;[m
       --tw-backdrop-brightness: initial;[m
       --tw-backdrop-contrast: initial;[m
[1mdiff --git a/src/pages/dashboard.rs b/src/pages/dashboard.rs[m
[1mindex 22c2847..ba1dece 100644[m
[1m--- a/src/pages/dashboard.rs[m
[1m+++ b/src/pages/dashboard.rs[m
[36m@@ -15,6 +15,9 @@[m [muse std::thread_local;[m
 use crate::components::language_selector::{Language, AVAILABLE_LANGUAGES};[m
 use std::env;[m
 use crate::constants::config::{BASE_API_URL, PARAGRAPHS, CHAPTERS};[m
[32m+[m[32muse web_sys::window;[m
[32m+[m[32muse wasm_bindgen::closure::Closure;[m
[32m+[m[32muse wasm_bindgen::JsCast;[m
 [m
 thread_local! {[m
     static CURRENT_LANGUAGE: RefCell<String> = RefCell::new(String::from("zh-TW"));[m
[36m@@ -139,7 +142,8 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
     let mut extra_gotos = use_signal(|| Vec::<String>::new());[m
     let mut show_extra_options = use_signal(|| Vec::<()>::new());[m
     let mut show_toast = use_signal(|| false);[m
[31m-    let toast_visible = use_signal(|| false);[m
[32m+[m[32m    let mut toast_visible = use_signal(|| false);[m
[32m+[m[32m    let mut init_done = use_signal(|| false);[m
     let mut is_open = use_signal(|| false);[m
     let mut search_query = use_signal(|| String::new());[m
     let mut is_paragraph_open = use_signal(|| false);[m
[36m@@ -169,6 +173,10 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
     let mut extra_action_keys = use_signal(|| Vec::<Option<String>>::new());[m
     let mut extra_action_values = use_signal(|| Vec::<Option<serde_json::Value>>::new());[m
 [m
[32m+[m[32m    let mut show_error_toast = use_signal(|| false);[m
[32m+[m[32m    let mut error_message = use_signal(|| String::new());[m
[32m+[m[32m    let mut error_toast_visible = use_signal(|| false);[m
[32m+[m
     let mut update_paragraph_previews = move || {[m
         let selected_lang = paragraph_language.read().clone();[m
         [m
[36m@@ -320,63 +328,26 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
             !new_caption.read().trim().is_empty() &&[m
             !new_goto.read().trim().is_empty();[m
 [m
[31m-        // 檢查額外選項[m
[31m-        let extra_choices_valid = extra_captions.read().iter().zip(extra_gotos.read().iter())[m
[31m-            .all(|(caption, goto)| !caption.trim().is_empty() && !goto.trim().is_empty());[m
[32m+[m[32m        // 檢查額外選項（只有在有額外選項時才檢查）[m
[32m+[m[32m        let extra_choices_valid = if !extra_captions.read().is_empty() {[m
[32m+[m[32m            extra_captions.read().iter().zip(extra_gotos.read().iter())[m
[32m+[m[32m                .all(|(caption, goto)| !caption.trim().is_empty() && !goto.trim().is_empty())[m
[32m+[m[32m        } else {[m
[32m+[m[32m            true[m
[32m+[m[32m        };[m
 [m
         main_fields_valid && extra_choices_valid[m
     });[m
 [m
     let has_changes = use_memo(move || {[m
[31m-        let language_state = language_state.clone();[m
[31m-        if let Some(paragraph) = selected_paragraph.read().as_ref() {[m
[31m-            let current_lang = language_state.read().current_language.clone();[m
[31m-            // 檢查當前語言的翻譯是否存在[m
[31m-            if let Some(existing_text) = paragraph.texts.iter().find(|text| text.lang == current_lang) {[m
[31m-                // 比較段落內容[m
[31m-                let paragraphs_changed = existing_text.paragraphs != *paragraphs.read();[m
[31m-                [m
[31m-                // 比較選項[m
[31m-                let choices_changed = if !existing_text.choices.is_empty() {[m
[31m-                    // 檢查第一個選項[m
[31m-                    let first_choice_changed = existing_text.choices[0].caption != *new_caption.read() ||[m
[31m-                                            existing_text.choices[0].action.to != *new_goto.read();[m
[31m-                    [m
[31m-                    // 檢查額外選項[m
[31m-                    let extra_choices_changed = if existing_text.choices.len() > 1 {[m
[31m-                        let existing_extra = &existing_text.choices[1..];[m
[31m-                        let current_extra_captions = &extra_captions.read();[m
[31m-                        let current_extra_gotos = &extra_gotos.read();[m
[31m-                        [m
[31m-                        if existing_extra.len() != current_extra_captions.len() {[m
[31m-                            true[m
[31m-                        } else {[m
[31m-                            existing_extra.iter().zip(current_extra_captions.iter().zip(current_extra_gotos.iter()))[m
[31m-                                .any(|(existing, (current_caption, current_goto))| {[m
[31m-                                    existing.caption != *current_caption || existing.action.to != *current_goto[m
[31m-                                })[m
[31m-                        }[m
[31m-                    } else {[m
[31m-                        !extra_captions.read().is_empty() || !extra_gotos.read().is_empty()[m
[31m-                    };[m
[31m-                    [m
[31m-                    first_choice_changed || extra_choices_changed[m
[31m-                } else {[m
[31m-                    !new_caption.read().is_empty() || !new_goto.read().is_empty() ||[m
[31m-                    !extra_captions.read().is_empty() || !extra_gotos.read().is_empty()[m
[31m-                };[m
[31m-                [m
[31m-                paragraphs_changed || choices_changed[m
[31m-            } else {[m
[31m-                // 如果是新翻譯，只要有任何內容就表示有變化[m
[31m-                !paragraphs.read().trim().is_empty() ||[m
[31m-                !new_caption.read().trim().is_empty() ||[m
[31m-                !new_goto.read().trim().is_empty() ||[m
[31m-                !extra_captions.read().is_empty() ||[m
[31m-                !extra_gotos.read().is_empty()[m
[31m-            }[m
[32m+[m[32m        if *is_edit_mode.read() {[m
[32m+[m[32m            // 如果是編輯模式，檢查是否有任何欄位被修改[m
[32m+[m[32m            let paragraphs_changed = paragraphs.read().to_string() != selected_paragraph.read().as_ref().map(|p| p.texts.iter().find(|t| t.lang == *paragraph_language.read()).map(|t| t.paragraphs.clone()).unwrap_or_default()).unwrap_or_default();[m
[32m+[m[32m            let choices_changed = !new_caption.read().trim().is_empty() || !new_goto.read().trim().is_empty() || !extra_captions.read().is_empty() || !extra_gotos.read().is_empty();[m
[32m+[m[32m            paragraphs_changed || choices_changed[m
         } else {[m
[31m-            false[m
[32m+[m[32m            // 如果是新翻譯，只要有任何內容就表示有變化[m
[32m+[m[32m            true  // 在新增模式下，我們總是認為有變更，因為這是一個新的段落[m
         }[m
     });[m
 [m
[36m@@ -436,6 +407,34 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
             [m
             // 檢查是否選擇了章節[m
             if selected_chapter.read().is_empty() {[m
[32m+[m[32m                error_message.set("請選擇章節".to_string());[m
[32m+[m[32m                show_error_toast.set(true);[m
[32m+[m[32m                let mut error_toast_visible = error_toast_visible.clone();[m
[32m+[m[32m                spawn_local(async move {[m
[32m+[m[32m                    let window = web_sys::window().unwrap();[m
[32m+[m[32m                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                        window[m
[32m+[m[32m                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                &resolve,[m
[32m+[m[32m                                50,[m
[32m+[m[32m                            )[m
[32m+[m[32m                            .unwrap();[m
[32m+[m[32m                    });[m
[32m+[m[32m                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                    error_toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                    // 3秒後隱藏 toast[m
[32m+[m[32m                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                        window[m
[32m+[m[32m                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                &resolve,[m
[32m+[m[32m                                3000,[m
[32m+[m[32m                            )[m
[32m+[m[32m                            .unwrap();[m
[32m+[m[32m                    });[m
[32m+[m[32m                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                    error_toast_visible.set(false);[m
[32m+[m[32m                });[m
                 return;[m
             }[m
             [m
[36m@@ -458,8 +457,9 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
                 .json(&new_paragraph)[m
                 .send()[m
                 .await {[m
[31m-                            Ok(response) => {[m
[31m-                                if response.status().is_success() {[m
[32m+[m[32m                Ok(response) => {[m
[32m+[m[32m                    let status = response.status();[m
[32m+[m[32m                    if status.is_success() {[m
                         paragraphs.set(String::new());[m
                         choices.clear();[m
                         new_caption.set(String::new());[m
[36m@@ -467,32 +467,136 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
                         new_action_type.set(String::new());[m
                         new_action_key.set(None);[m
                         new_action_value.set(None);[m
[31m-                                    extra_captions.write().clear();[m
[31m-                                    extra_gotos.write().clear();[m
[32m+[m[32m                        extra_captions.write().clear();[m
[32m+[m[32m                        extra_gotos.write().clear();[m
                         extra_action_types.write().clear();[m
                         extra_action_keys.write().clear();[m
                         extra_action_values.write().clear();[m
[31m-                                    show_extra_options.write().clear();[m
[32m+[m[32m                        show_extra_options.write().clear();[m
                         selected_chapter.set(String::new());[m
[31m-                                    show_toast.set(true);[m
[31m-                                    [m
[31m-                                    let mut toast_visible = toast_visible.clone();[m
[31m-                                    spawn_local(async move {[m
[31m-                                        let window = web_sys::window().unwrap();[m
[31m-                                        let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[31m-                                            window[m
[31m-                                                .set_timeout_with_callback_and_timeout_and_arguments_0([m
[31m-                                                    &resolve,[m
[31m-                                                    50,[m
[31m-                                                )[m
[31m-                                                .unwrap();[m
[31m-                                        });[m
[31m-                                        let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[31m-                                        toast_visible.set(true);[m
[32m+[m[32m                        show_toast.set(true);[m
[32m+[m[41m                        [m
[32m+[m[32m                        let mut toast_visible = toast_visible.clone();[m
[32m+[m[32m                        spawn_local(async move {[m
[32m+[m[32m                            let window = web_sys::window().unwrap();[m
[32m+[m[32m                            let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                window[m
[32m+[m[32m                                    .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                        &resolve,[m
[32m+[m[32m                                        50,[m
[32m+[m[32m                                    )[m
[32m+[m[32m                                    .unwrap();[m
[32m+[m[32m                            });[m
[32m+[m[32m                            let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                            toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                            // 3秒後隱藏 toast[m
[32m+[m[32m                            let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                window[m
[32m+[m[32m                                    .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                        &resolve,[m
[32m+[m[32m                                        3000,[m
[32m+[m[32m                                    )[m
[32m+[m[32m                                    .unwrap();[m
[32m+[m[32m                            });[m
[32m+[m[32m                            let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                            toast_visible.set(false);[m
[32m+[m[32m                        });[m
[32m+[m[32m                    } else {[m
[32m+[m[32m                        match response.text().await {[m
[32m+[m[32m                            Ok(error_text) => {[m
[32m+[m[32m                                error_message.set(format!("伺服器錯誤: {}", error_text));[m
[32m+[m[32m                                show_error_toast.set(true);[m
[32m+[m[32m                                let mut error_toast_visible = error_toast_visible.clone();[m
[32m+[m[32m                                spawn_local(async move {[m
[32m+[m[32m                                    let window = web_sys::window().unwrap();[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                50,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
[32m+[m[32m                                    });[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    error_toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                                    // 3秒後隱藏 toast[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                3000,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
                                     });[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    error_toast_visible.set(false);[m
[32m+[m[32m                                });[m
[32m+[m[32m                            }[m
[32m+[m[32m                            Err(_) => {[m
[32m+[m[32m                                error_message.set(format!("伺服器錯誤: {}", status));[m
[32m+[m[32m                                show_error_toast.set(true);[m
[32m+[m[32m                                let mut error_toast_visible = error_toast_visible.clone();[m
[32m+[m[32m                                spawn_local(async move {[m
[32m+[m[32m                                    let window = web_sys::window().unwrap();[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                50,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
[32m+[m[32m                                    });[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    error_toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                                    // 3秒後隱藏 toast[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                3000,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
[32m+[m[32m                                    });[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    error_toast_visible.set(false);[m
[32m+[m[32m                                });[m
[32m+[m[32m                            }[m
[32m+[m[32m                        }[m
                     }[m
                 }[m
[31m-                Err(_) => {}[m
[32m+[m[32m                Err(e) => {[m
[32m+[m[32m                    error_message.set(format!("網路錯誤: {}", e));[m
[32m+[m[32m                    show_error_toast.set(true);[m
[32m+[m[32m                    let mut error_toast_visible = error_toast_visible.clone();[m
[32m+[m[32m                    spawn_local(async move {[m
[32m+[m[32m                        let window = web_sys::window().unwrap();[m
[32m+[m[32m                        let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                            window[m
[32m+[m[32m                                .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                    &resolve,[m
[32m+[m[32m                                    50,[m
[32m+[m[32m                                )[m
[32m+[m[32m                                .unwrap();[m
[32m+[m[32m                        });[m
[32m+[m[32m                        let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                        error_toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                        // 3秒後隱藏 toast[m
[32m+[m[32m                        let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                            window[m
[32m+[m[32m                                .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                    &resolve,[m
[32m+[m[32m                                    3000,[m
[32m+[m[32m                                )[m
[32m+[m[32m                                .unwrap();[m
[32m+[m[32m                        });[m
[32m+[m[32m                        let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                        error_toast_visible.set(false);[m
[32m+[m[32m                    });[m
[32m+[m[32m                }[m
             }[m
         });[m
     };[m
[36m@@ -553,41 +657,53 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
                         .json(&updated_paragraph)[m
                         .send()[m
                         .await {[m
[31m-                    Ok(response) => {[m
[31m-                        if response.status().is_success() {[m
[31m-                            paragraphs.set(String::new());[m
[31m-                            choices.clear();[m
[31m-                            new_caption.set(String::new());[m
[31m-                            new_goto.set(String::new());[m
[31m-                            new_action_type.set(String::new());[m
[31m-                            new_action_key.set(None);[m
[31m-                            new_action_value.set(None);[m
[31m-                            extra_captions.write().clear();[m
[31m-                            extra_gotos.write().clear();[m
[31m-                            extra_action_types.write().clear();[m
[31m-                            extra_action_keys.write().clear();[m
[31m-                            extra_action_values.write().clear();[m
[31m-                            show_extra_options.write().clear();[m
[31m-                            show_toast.set(true);[m
[31m-                            [m
[31m-                                    let mut toast_visible = toast_visible.clone();[m
[31m-                                    spawn_local(async move {[m
[31m-                                        let window = web_sys::window().unwrap();[m
[31m-                                        let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[31m-                                            window[m
[31m-                                                .set_timeout_with_callback_and_timeout_and_arguments_0([m
[31m-                                                    &resolve,[m
[31m-                                            50,[m
[31m-                                                )[m
[31m-                                                .unwrap();[m
[31m-                                        });[m
[31m-                                        let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[31m-                                toast_visible.set(true);[m
[32m+[m[32m                        Ok(response) => {[m
[32m+[m[32m                            if response.status().is_success() {[m
[32m+[m[32m                                paragraphs.set(String::new());[m
[32m+[m[32m                                choices.clear();[m
[32m+[m[32m                                new_caption.set(String::new());[m
[32m+[m[32m                                new_goto.set(String::new());[m
[32m+[m[32m                                new_action_type.set(String::new());[m
[32m+[m[32m                                new_action_key.set(None);[m
[32m+[m[32m                                new_action_value.set(None);[m
[32m+[m[32m                                extra_captions.write().clear();[m
[32m+[m[32m                                extra_gotos.write().clear();[m
[32m+[m[32m                                extra_action_types.write().clear();[m
[32m+[m[32m                                extra_action_keys.write().clear();[m
[32m+[m[32m                                extra_action_values.write().clear();[m
[32m+[m[32m                                show_extra_options.write().clear();[m
[32m+[m[32m                                show_toast.set(true);[m
[32m+[m[41m                                [m
[32m+[m[32m                                let mut toast_visible = toast_visible.clone();[m
[32m+[m[32m                                spawn_local(async move {[m
[32m+[m[32m                                    let window = web_sys::window().unwrap();[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                50,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
                                     });[m
[31m-                                }[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    toast_visible.set(true);[m
[32m+[m
[32m+[m[32m                                    // 3秒後隱藏 toast[m
[32m+[m[32m                                    let promise = js_sys::Promise::new(&mut |resolve, _| {[m
[32m+[m[32m                                        window[m
[32m+[m[32m                                            .set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                                                &resolve,[m
[32m+[m[32m                                                3000,[m
[32m+[m[32m                                            )[m
[32m+[m[32m                                            .unwrap();[m
[32m+[m[32m                                    });[m
[32m+[m[32m                                    let _ = wasm_bindgen_futures::JsFuture::from(promise).await;[m
[32m+[m[32m                                    toast_visible.set(false);[m
[32m+[m[32m                                });[m
                             }[m
[31m-                            Err(_) => {}[m
                         }[m
[32m+[m[32m                        Err(_) => {}[m
[32m+[m[32m                    }[m
                 });[m
             }[m
         }[m
[36m@@ -708,11 +824,59 @@[m [mpub fn Dashboard(_props: DashboardProps) -> Element {[m
         options.remove(index);[m
     };[m
 [m
[32m+[m[32m    // 處理 toast 顯示[m
[32m+[m[32m    use_effect(move || {[m
[32m+[m[32m        if *show_toast.read() {[m
[32m+[m[32m            toast_visible.set(true);[m
[32m+[m[32m            let window = window().unwrap();[m
[32m+[m[32m            let closure = Closure::wrap(Box::new(move || {[m
[32m+[m[32m                toast_visible.set(false);[m
[32m+[m[32m                show_toast.set(false);[m
[32m+[m[32m            }) as Box<dyn FnMut()>);[m
[32m+[m[41m            [m
[32m+[m[32m            let timeout = window.set_timeout_with_callback_and_timeout_and_arguments_0([m
[32m+[m[32m                closure.as_ref().unchecked_ref(),[m
[32m+[m[32m                3000,[m
[32m+[m[32m            ).unwrap();[m
[32m+[m[41m            [m
[32m+[m[32m            (move || {[m
[32m+[m[32m                window.clear_timeout_with_handle(timeout);[m
[32m+[m[32m                closure.forget(); // 防止 closure 被過早釋放[m
[32m+[m[32m            })()[m
[32m+[m[32m        }[m
[32m+[m[32m    });[m
[32m+[m
     rsx! {[m
         crate::pages::layout::Layout { [m
             title: Some("Dashboard"),[m
             div { [m
                 class: "min-h-screen bg-gray-50 dark:bg-gray-900",[m
[32m+[m[32m                // Toast 區域[m
[32m+[m[32m                div {[m
[32m+[m[32m                    class: "fixed bottom-4 right-4 z-50",[m
[32m+[m[32m                    // 成功 Toast[m
[32m+[m[32m                    div {[m
[32m+[m[32m                        class: format!("bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform {}",[m
[32m+[m[32m                            if *toast_visible.read() {[m
[32m+[m[32m                                "translate-y-0 opacity-100"[m
[32m+[m[32m                            } else {[m
[32m+[m[32m                                "translate-y-2 opacity-0 hidden"[m
[32m+[m[32m                            }[m
[32m+[m[32m                        ),[m
[32m+[m[32m                        "{t.submit_success}"[m
[32m+[m[32m                    }[m
[32m+[m[32m                    // 錯誤 Toast[m
[32m+[m[32m                    div {[m
[32m+[m[32m                        class: format!("bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform {}",[m
[32m+[m[32m                            if *error_toast_visible.read() {[m
[32m+[m[32m                                "translate-y-0 opacity-100"[m
[32m+[m[32m                            } else {[m
[32m+[m[32m                                "translate-y-2 opacity-0 hidden"[m
[32m+[m[32m                            }[m
[32m+[m[32m                        ),[m
[32m+[m[32m                        "{error_message.read()}"[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
                 div {[m
                     class: "w-full mx-auto",[m
                     // 主要內容區域[m
